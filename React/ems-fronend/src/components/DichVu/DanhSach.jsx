import React, { useState, useEffect } from 'react';
import { DuLieu, XoaDichVu, KiemTraDichVu } from '../../services/DichVuService';
import FormAdd from './FormAdd';
import FormUpdate from './FormUpdate';
import Swal from 'sweetalert2';
import {
    Box,
    TextField,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Paper,
    Button,
    Pagination,
    Typography,
    Grid,
    Select,
    MenuItem,
    FormControl,
    InputLabel,
    Card,
    CardContent,
} from '@mui/material';

const DanhSach = () => {
    const [dichVuList, setDichVuList] = useState([]);
    const [showForm, setShowForm] = useState(false);
    const [showUpdateForm, setShowUpdateForm] = useState(false);
    const [currentDichVu, setCurrentDichVu] = useState(null);
    const [searchKeyword, setSearchKeyword] = useState('');
    const [filterStatus, setFilterStatus] = useState('');
    const [currentPage, setCurrentPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const itemsPerPage = 5;

    useEffect(() => {
        loadDichVu();
    }, [searchKeyword, filterStatus, currentPage]);

    const loadDichVu = () => {
        DuLieu()
            .then(response => {
                const filteredData = response.data.filter(dv => {
                    const matchesStatus = filterStatus !== '' ? dv.trangThai === (filterStatus === 'true') : true;
                    const matchesKeyword = searchKeyword
                        ? dv.tenDichVu.toLowerCase().includes(searchKeyword.toLowerCase()) ||
                        dv.moTa.toLowerCase().includes(searchKeyword.toLowerCase())
                        : true;

                    return matchesStatus && matchesKeyword;
                });

                const startIndex = currentPage * itemsPerPage;
                const paginatedData = filteredData.slice(startIndex, startIndex + itemsPerPage);
                setDichVuList(paginatedData);
                setTotalPages(Math.ceil(filteredData.length / itemsPerPage));
            })
            .catch(error => {
                console.error("L·ªói khi t·∫£i danh s√°ch d·ªãch v·ª•:", error);
            });
    };

    const handleDelete = async (id) => {
        try {
            // G·ªçi API ki·ªÉm tra tr∆∞·ªõc khi x√≥a
            const response = await KiemTraDichVu(id);
            console.log("K·∫øt qu·∫£ ki·ªÉm tra:", response.data); // üõ† Debug API
    
            if (response.data.isUsed) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Kh√¥ng th·ªÉ x√≥a',
                    text: 'D·ªãch v·ª• ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng!',
                    confirmButtonColor: '#3085d6'
                });
                return; // D·ª´ng n·∫øu d·ªãch v·ª• ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng
            }
    
            // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu li√™n quan, x√°c nh·∫≠n x√≥a
            Swal.fire({
                title: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a d·ªãch v·ª• n√†y?',
                text: "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'X√≥a',
                cancelButtonText: 'H·ªßy'
            }).then((result) => {
                if (result.isConfirmed) {
                    XoaDichVu(id)
                        .then(() => {
                            Swal.fire({
                                icon: 'success',
                                title: 'ƒê√£ x√≥a!',
                                text: 'D·ªãch v·ª• ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.',
                                confirmButtonColor: '#6a5acd'
                            });
                            loadDichVu(); // C·∫≠p nh·∫≠t danh s√°ch
                        })
                        .catch(error => {
                            Swal.fire({
                                icon: 'error',
                                title: 'L·ªói',
                                text: 'Kh√¥ng th·ªÉ x√≥a d·ªãch v·ª•. Vui l√≤ng th·ª≠ l·∫°i!',
                                confirmButtonColor: '#d33'
                            });
                        });
                }
            });
        } catch (error) {
            console.error("L·ªói khi ki·ªÉm tra d·ªãch v·ª•:", error);
            Swal.fire({
                icon: 'error',
                title: 'L·ªói',
                text: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!',
                confirmButtonColor: '#d33'
            });
        }
    };    


    return (
        <Box sx={{ p: 3 }}>
            <Card>
                <CardContent>
                    <Grid container spacing={2} alignItems="center" justifyContent="space-between">
                        <Grid item>
                            <Button variant="contained" color="success" onClick={() => setShowForm(true)}>
                                Th√™m D·ªãch V·ª•
                            </Button>
                        </Grid>

                        <Grid item xs={12} sm={6} md={4}>
                            <TextField
                                fullWidth
                                label="T√¨m ki·∫øm..."
                                variant="outlined"
                                value={searchKeyword}
                                onChange={(e) => setSearchKeyword(e.target.value)}
                            />
                        </Grid>

                        <Grid item xs={12} sm={4} md={3}>
                            <FormControl fullWidth>
                                <InputLabel>Tr·∫°ng th√°i</InputLabel>
                                <Select value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)}>
                                    <MenuItem value="">T·∫•t c·∫£</MenuItem>
                                    <MenuItem value="true">Ho·∫°t ƒë·ªông</MenuItem>
                                    <MenuItem value="false">Ng·ª´ng ho·∫°t ƒë·ªông</MenuItem>
                                </Select>
                            </FormControl>
                        </Grid>

                        <Grid item>
                            <Button variant="outlined" onClick={loadDichVu}>
                                L·ªçc
                            </Button>
                        </Grid>
                    </Grid>

                    <TableContainer component={Paper} sx={{ mt: 3 }}>
                        <Table>
                            <TableHead>
                                <TableRow>
                                    <TableCell>T√™n D·ªãch V·ª•</TableCell>
                                    <TableCell>Gi√°</TableCell>
                                    <TableCell>M√¥ T·∫£</TableCell>
                                    <TableCell>H√¨nh ·∫£nh</TableCell>
                                    <TableCell>Tr·∫°ng Th√°i</TableCell>
                                    <TableCell>H√†nh ƒê·ªông</TableCell>
                                </TableRow>
                            </TableHead>
                            <TableBody>
                                {dichVuList.length > 0 ? (
                                    dichVuList.map((dv) => (
                                        <TableRow key={dv.id}>
                                            <TableCell>{dv.tenDichVu}</TableCell>
                                            <TableCell>{dv.donGia}</TableCell>
                                            <TableCell>{dv.moTa}</TableCell>
                                            <TableCell>
                                                <img src={dv.hinhAnh} alt={dv.tenDichVu} style={{ width: '100px', height: 'auto' }} />
                                            </TableCell>
                                            <TableCell>{dv.trangThai ? 'Ho·∫°t ƒë·ªông' : 'Ng·ª´ng ho·∫°t ƒë·ªông'}</TableCell>
                                            <TableCell>
                                                <Button variant="outlined" color="warning" onClick={() => { setCurrentDichVu(dv); setShowUpdateForm(true); }}>S·ª≠a</Button>
                                                <Button variant="outlined" color="error" onClick={() => handleDelete(dv.id)} sx={{ ml: 1 }}>X√≥a</Button>
                                            </TableCell>
                                        </TableRow>
                                    ))
                                ) : (
                                    <TableRow>
                                        <TableCell colSpan="6" align="center">Kh√¥ng c√≥ d·ªãch v·ª•</TableCell>
                                    </TableRow>
                                )}
                            </TableBody>
                        </Table>
                    </TableContainer>

                    <Box display="flex" justifyContent="center" mt={3}>
                        <Pagination
                            count={totalPages}
                            page={currentPage + 1}
                            onChange={(event, page) => setCurrentPage(page - 1)}
                            color="primary"
                        />
                    </Box>

                    {showForm && <FormAdd show={showForm} handleClose={() => setShowForm(false)} refreshData={loadDichVu} />}
                    {showUpdateForm && <FormUpdate show={showUpdateForm} handleClose={() => setShowUpdateForm(false)} refreshData={loadDichVu} dichVu={currentDichVu} />}
                </CardContent>
            </Card>
        </Box>
    );
};

export default DanhSach;
